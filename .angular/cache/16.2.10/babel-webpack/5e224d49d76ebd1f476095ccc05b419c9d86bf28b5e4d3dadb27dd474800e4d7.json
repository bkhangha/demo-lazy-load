{"ast":null,"code":"import { ChangeDetectorRef } from '@angular/core';\nimport { NodeService } from '../../service/nodeservice';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/nodeservice\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/treetable\";\nfunction TreeTableLazyLoadDemo_ng_template_2_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r4.header, \" \");\n  }\n}\nfunction TreeTableLazyLoadDemo_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, TreeTableLazyLoadDemo_ng_template_2_th_1_Template, 2, 1, \"th\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r2);\n  }\n}\nfunction TreeTableLazyLoadDemo_ng_template_3_td_1_p_treeTableToggler_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-treeTableToggler\", 6);\n  }\n  if (rf & 2) {\n    const rowNode_r5 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"rowNode\", rowNode_r5);\n  }\n}\nfunction TreeTableLazyLoadDemo_ng_template_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtemplate(1, TreeTableLazyLoadDemo_ng_template_3_td_1_p_treeTableToggler_1_Template, 1, 1, \"p-treeTableToggler\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const rowData_r6 = i0.ɵɵnextContext().rowData;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r10 === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", rowData_r6[col_r9.field], \" \");\n  }\n}\nfunction TreeTableLazyLoadDemo_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, TreeTableLazyLoadDemo_ng_template_3_td_1_Template, 3, 2, \"td\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const columns_r7 = ctx.columns;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", columns_r7);\n  }\n}\nconst _c0 = function () {\n  return {\n    \"min-width\": \"50rem\"\n  };\n};\nclass TreeTableLazyLoadDemo {\n  nodeService;\n  cd;\n  files;\n  cols;\n  totalRecords;\n  loading = false;\n  constructor(nodeService, cd) {\n    this.nodeService = nodeService;\n    this.cd = cd;\n  }\n  ngOnInit() {\n    this.cols = [{\n      field: 'name',\n      header: 'Name'\n    }, {\n      field: 'size',\n      header: 'Size'\n    }, {\n      field: 'type',\n      header: 'Type'\n    }];\n    this.totalRecords = 1000;\n    this.loading = true;\n  }\n  loadNodes(event) {\n    this.loading = true;\n    setTimeout(() => {\n      this.files = [];\n      for (let i = 0; i < event.rows; i++) {\n        let node = {\n          data: {\n            name: 'Item ' + (event.first + i),\n            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n            type: 'Type ' + (event.first + i)\n          },\n          leaf: false\n        };\n        this.files.push(node);\n      }\n      this.loading = false;\n      this.cd.markForCheck();\n    }, 1000);\n  }\n  onNodeExpand(event) {\n    this.loading = true;\n    setTimeout(() => {\n      this.loading = false;\n      const node = event.node;\n      node.children = [{\n        data: {\n          name: node.data.name + ' - 0',\n          size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n          type: 'File'\n        }\n      }, {\n        data: {\n          name: node.data.name + ' - 1',\n          size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n          type: 'File'\n        }\n      }];\n      this.files = [...this.files];\n    }, 250);\n  }\n  static ɵfac = function TreeTableLazyLoadDemo_Factory(t) {\n    return new (t || TreeTableLazyLoadDemo)(i0.ɵɵdirectiveInject(i1.NodeService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TreeTableLazyLoadDemo,\n    selectors: [[\"tree-table-lazy-load-demo\"]],\n    decls: 4,\n    vars: 10,\n    consts: [[1, \"card\"], [3, \"value\", \"columns\", \"paginator\", \"rows\", \"lazy\", \"totalRecords\", \"loading\", \"scrollable\", \"tableStyle\", \"onLazyLoad\", \"onNodeExpand\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [4, \"ngFor\", \"ngForOf\"], [3, \"rowNode\", 4, \"ngIf\"], [3, \"rowNode\"]],\n    template: function TreeTableLazyLoadDemo_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-treeTable\", 1);\n        i0.ɵɵlistener(\"onLazyLoad\", function TreeTableLazyLoadDemo_Template_p_treeTable_onLazyLoad_1_listener($event) {\n          return ctx.loadNodes($event);\n        })(\"onNodeExpand\", function TreeTableLazyLoadDemo_Template_p_treeTable_onNodeExpand_1_listener($event) {\n          return ctx.onNodeExpand($event);\n        });\n        i0.ɵɵtemplate(2, TreeTableLazyLoadDemo_ng_template_2_Template, 2, 1, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, TreeTableLazyLoadDemo_ng_template_3_Template, 2, 1, \"ng-template\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.files)(\"columns\", ctx.cols)(\"paginator\", true)(\"rows\", 10)(\"lazy\", true)(\"totalRecords\", 1000)(\"loading\", ctx.loading)(\"scrollable\", true)(\"tableStyle\", i0.ɵɵpureFunction0(9, _c0));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.PrimeTemplate, i4.TreeTable, i4.TreeTableToggler],\n    encapsulation: 2\n  });\n}\nexport { TreeTableLazyLoadDemo };","map":{"version":3,"names":["ChangeDetectorRef","NodeService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","col_r4","header","ɵɵtemplate","TreeTableLazyLoadDemo_ng_template_2_th_1_Template","ɵɵproperty","columns_r2","ɵɵelement","rowNode_r5","TreeTableLazyLoadDemo_ng_template_3_td_1_p_treeTableToggler_1_Template","i_r10","rowData_r6","col_r9","field","TreeTableLazyLoadDemo_ng_template_3_td_1_Template","columns_r7","TreeTableLazyLoadDemo","nodeService","cd","files","cols","totalRecords","loading","constructor","ngOnInit","loadNodes","event","setTimeout","i","rows","node","data","name","first","size","Math","floor","random","type","leaf","push","markForCheck","onNodeExpand","children","ɵɵdirectiveInject","i1","selectors","decls","vars","consts","template","TreeTableLazyLoadDemo_Template","rf","ctx","ɵɵlistener","TreeTableLazyLoadDemo_Template_p_treeTable_onLazyLoad_1_listener","$event","TreeTableLazyLoadDemo_Template_p_treeTable_onNodeExpand_1_listener","TreeTableLazyLoadDemo_ng_template_2_Template","TreeTableLazyLoadDemo_ng_template_3_Template","ɵɵpureFunction0","_c0"],"sources":["/sandbox/src/app/demo/tree-table-lazy-load-demo.ts","/sandbox/src/app/demo/tree-table-lazy-load-demo.html"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\ninterface Column {\n    field: string;\n    header: string;\n}\n\n@Component({\n    selector: 'tree-table-lazy-load-demo',\n    templateUrl: './tree-table-lazy-load-demo.html'\n})\nexport class TreeTableLazyLoadDemo implements OnInit{\n    files!: TreeNode[];\n\n    cols!: Column[];\n\n    totalRecords!: number;\n\n    loading: boolean = false;\n\n    constructor(private nodeService: NodeService, private cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        this.totalRecords = 1000;\n\n        this.loading = true;\n    }\n\n    loadNodes(event: any) {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.files = [];\n\n            for (let i = 0; i < event.rows; i++) {\n                let node = {\n                    data: {\n                        name: 'Item ' + (event.first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (event.first + i)\n                    },\n                    leaf: false\n                };\n\n                this.files.push(node);\n            }\n            this.loading = false;\n            this.cd.markForCheck();\n        }, 1000);\n    }\n\n    onNodeExpand(event: any) {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            const node = event.node;\n\n            node.children = [\n                {\n                    data: {\n                        name: node.data.name + ' - 0',\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'File'\n                    }\n                },\n                {\n                    data: {\n                        name: node.data.name + ' - 1',\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'File'\n                    }\n                }\n            ];\n\n            this.files = [...this.files];\n        }, 250);\n    }\n}","<div class=\"card\">\n    <p-treeTable [value]=\"files\" [columns]=\"cols\" [paginator]=\"true\" [rows]=\"10\" [lazy]=\"true\" (onLazyLoad)=\"loadNodes($event)\" [totalRecords]=\"1000\" [loading]=\"loading\" (onNodeExpand)=\"onNodeExpand($event)\" [scrollable]=\"true\" [tableStyle]=\"{'min-width':'50rem'}\">\n        <ng-template pTemplate=\"header\" let-columns>\n            <tr>\n                <th *ngFor=\"let col of columns\">\n                    {{ col.header }}\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\n            <tr>\n                <td *ngFor=\"let col of columns; let i = index\">\n                    <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\n                    {{ rowData[col.field] }}\n                </td>\n            </tr>\n        </ng-template>\n    </p-treeTable>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}